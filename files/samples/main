/*
 * Bare metal template created by Harry Wagstaff
 * Based on Freescale Codewarrior Bareboard project template
 * Edited by Stan Manilov
 */

#include "MK70F12.h"

#include "led.h"
#include "btn.h"
#include "uart.h"
#include "fpu.h"
#include "filter1.h"
#include "filter2.h"
#include "filter3.h"
#include "filter4.h"


// __init_hardware is called by the Freescale __thumb_startup function (see
// vectors.c)
void __init_hardware()
{
	// Disable the Watchdog module. This module is designed to reset
	// the board in case it crashes for some reason. We don't need it,
	// so we disable it here.
	WDOG_UNLOCK = 0xC520;
	WDOG_UNLOCK = 0xD928;
	WDOG_STCTRLH = 0xD2;

	// Configure the MCG - set up clock dividers on
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV3(1) | SIM_CLKDIV1_OUTDIV4(1);
	MCG_C1 = MCG_C1_CLKS(2);

	fpu_init();
	uart_init();
	led_init();
	btn_init();

}

filter1Type *f1;
filter2Type *f2;
filter3Type *f3;
filter4Type *f4;

int8_t cast_signed(uint8_t bytes)
{
	return (int8_t) bytes;
}

uint8_t cast_unsigned(int8_t bytes) {
	return (uint8_t) bytes;
}


float squash_int(int8_t bytes) {
	return bytes / 128.0;
}

int8_t unsquash_float(float bytes) {
	return bytes * 128.0;
}

void filter_signal(int filter_num)
{
	int8_t received;
	float squashed;
	float filtered;
	uint8_t unsquashed;

	received = cast_signed(receive());
	squashed = squash_int(received);
	if (filter_num == 0) {
		filter1_filterBlock(f1, &squashed, &filtered, 1);
	} else if (filter_num == 1) {
		filter2_filterBlock(f2, &squashed, &filtered, 1);
	} else if (filter_num == 2) {
		filter3_filterBlock(f3, &squashed, &filtered, 1);
	} else {
		filter4_filterBlock(f4, &squashed, &filtered, 1);
	}

	unsquashed = cast_unsigned(unsquash_float(filtered));
	send(unsquashed);

}

void main()
{
	int selected_filter;

 	f1 = filter1_create();
	f2 = filter2_create();
	f3 = filter3_create();
	f4 = filter4_create();

	selected_filter = 0;
	led_on(selected_filter);

	while(1)
	{
		while(!is_data()) {
			if (btn_state(BTN_BOTTOM) == BTN_ON) {

				led_off(selected_filter);
				if (selected_filter == 3) {
					selected_filter = 0;
				} else {
					selected_filter++;
				}
				led_on(selected_filter);
				while(btn_state(BTN_BOTTOM) == BTN_ON);

			} else if (btn_state(BTN_TOP) == BTN_ON) {

				led_off(selected_filter);
				if (selected_filter == 0) {
					selected_filter = 3;
				} else {
					selected_filter--;
				}
				led_on(selected_filter);
				while(btn_state(BTN_TOP) == BTN_ON);
			}
		}

	filter_signal(selected_filter);

	}
}